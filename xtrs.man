.TH xtrs 1
.SH Name
xtrs \- TRS-80 Model I/III/4 Emulator for the X Window System
.SH Syntax
.B xtrs
.I [options]
.SH Description
\fIxtrs\fP is built on top of a Z-80 emulator, with added routines to support
keyboard and video I/O through an X interface.
The hardware emulation can operate as a TRS-80 Model I, Model III, or Model 4.

\fIxtrs\fP supports 48K of RAM in Model I or Model III mode,
128K in Model 4 mode. 
Floppy disks are emulated using files to store the data; or, under
Linux only, real floppy drives can be used.
A printer is emulated by
sending its output to standard output.  
There is also a rudimentary emulation of cassette I/O
that uses files for cassette tapes (Model I mode only).

The Z-80 emulator has a debugger called zbx.  It works sort of
like dbx.  If you run with debugging turned on (see the options section for
how to do this), you'll enter the debugger, and
you can type "help" for more information.

Special support in the emulator allows the program to block when
waiting for information from the keyboard.  This will work only for
programs that wait for keyboard input using the standard Model I/III
ROM call; the emulator decides whether to block the Z-80 program when
it tries to read from the keyboard memory by pattern-matching its
stack.

.SH Keys
The following keys have special meanings to \fIxtrs\fP:

LeftArrow, Backspace, or Delete is the TRS-80 left arrow key.
RightArrow or Tab is the right arrow key.  UpArrow is the up arrow
key.  DownArrow or Linefeed is the down arrow key.  Esc or Break is
the Break key.  Home, Clear, or LeftAlt is the Clear key.  Control is
the Model 4 Ctrl key (address bit 7, data bit 2).  RightAlt is
equivalent to the shifted down arrow key (used as a control key with
some TRS-80 software).

F1, F2, and F3 are the Model 4 function keys (address bit 7, data bits
4, 5, and 6).  F1 is also the Model I Electric Pencil control key that
some users added to their machines.  F4 is the Model 4 Caps Lock key
(address bit 7, data bit 3).  F5, Compose, or ScrollLock is equivalent
to the @ key (so that @ can be used as a modifier key).  F6 is
equivalent to the 0 key (so that a shifted 0 can be obtained).  F7
signals a disk change in the emulated floppy drives (see below).  F8
exits the program.  F9 requests entry to the debugger if it is active.
F10 is the reset button.

In Model III and 4 modes, the left and right shift keys are distinct; in
Model I mode, they are the same.  The F11 or F14 key activates the
position in the TRS-80 keyboard matrix that corresponds to the Model
III/4 right shift key (address bit 7, data bit 1) even in Model I mode.
F12 or End activates an unused position in the keyboard matrix
(address bit 7, data bit 7).  The keys [, \\, ], ^, _, {, |, },
and ~ also activate unused positions in the keyboard matrix (address
bit 3, data bits 3-7).  These keys map to the corresponding ASCII
characters under some TRS-80 keyboard drivers; under others, they do
nothing.  F13 or Insert is equivalent to underscore (address bit 3,
data bit 7), so that a shifted underscore can be obtained; this maps
to ASCII code 0x7f under some TRS-80 keyboard drivers.

.SH Cassette
To control the cassette, a file called ".cassette.ctl" in the
current directory keeps track of what file is currently "loaded" as
the cassette tape and the current position within that file.  The
"cassette" shell script provides a way to manipulate this file; typing
"help" shows its commands.  You may use this script to load and
position cassette tape files.  The operation works very much like an
actual tape recorder.

.SH Printer
For printer support, any text sent to the TRS-80's printer (using LPRINT
or LLIST, for example) is sent to the standard output.

.SH Floppy disks
In Model I mode, \fIxtrs\fP emulates a Radio Shack Expansion Interface with
the Percom Doubler or Radio Shack Doubler installed.  The Doubler
provided double-density disk access by allowing either the stock
WD1771 FDC chip or a WD1791 chip to be selected under program control.
At powerup the 1771 is selected, so operating systems with no Doubler
driver see a stock system.  The emulator pretends to be both a Percom
and Radio Shack Doubler at the same time -- it responds to the special
commands of both -- so a driver for either should work.  Under LDOS,
use the command "FDUBL" (newer versions of LDOS), or "PDUBL" or
"RDUBL" (older versions) to install the driver.

In Model III or 4 mode, \fIxtrs\fP emulates the stock Model III/4 floppy
controller, which used a WD1793 chip (software-compatible with the
WD1791) to provide both single and double density.

Four floppy drives are emulated, with storage in files named diskX-0,
diskX-1, diskX-2, diskX-3, where X=1 for Model I mode, 3 for Model III
mode, or 4 for Model 4 mode.  If a file of the required name is not
found, a drive with no disk in it is emulated (but see below).  If the
user does not have write permission for a floppy file, a write-protect
tab is emulated.  To change floppies in an emulated drive, rename the
existing file for the drive (if any), rename the new floppy file to
the proper name, and hit function key F7 in the emulator.

If you try to boot with no file named diskX-0 (that is, no disk in
drive 0), \fIxtrs\fP emulates having no disk controller.  The behavior of a
real machine with a disk controller in this case didn't seem useful to
emulate faithfully: A real Model I hangs with a screen full of
garbage; a real Model III or 4 goes into a retry loop printing
"Diskette?" on the screen and rechecking whether you've inserted one.

Due to a limitation of the original Model I hardware, drive :3 cannot
be double-sided in Model I mode.  In the original Model I, you could
not have a drive :3 at all if any drive in the system was
double-sided, but the emulator is able to be more forgiving.

Emulated floppy image files can be of either of two types: JV1,
compatible with Jeff Vavasour's popular freeware Model I emulator for
the PC; or JV3, a compatible extension of a format first used in
Vavasour's commercial Model III/4 emulator.  Both types work in \fIxtrs\fP
regardless of what model it is emulating.  A heuristic is used to
decide which type of image is in a drive, as neither type has a "magic
number" or signature.

JV1 supports only single density, single sided, with directory on
track 17.  Sectors must be 256 bytes long.  Use FORMAT (DIR=17) to
format JV1 disks with more (or less) than 35 tracks under LDOS.

JV3 is much more flexible, though it still does not support everything
the real controllers could do.  It is best to use JV3 for all the disk
images you create, unless you need to exchange images with someone who
is using the Vavasour Model I emulator.  A JV3 disk can be formatted
with 256 byte sectors, 1 or 2 sides, single or double density, with
either FB (normal) or F8 (deleted) data address mark on any sector.
You cannot format a sector with an incorrect track number or head
number, or with length other than 256 bytes.  You can format a sector
with an intentional CRC error in the data field.  The original JV3
format had a limit of 2901 total sectors, but \fIxtrs\fP allows up to 5802.
If you format more than 2901 sectors on a disk image, however, other
emulators may be unable to read the additional sectors.  An 80 track,
double-sided, double-density (18 sector) 5-inch floppy will fit within
the original 2901 sector limit; the extension to 5802 is primarily for
future emulation of 8-inch drives.  

The program \fImkfloppy\fP makes a blank emulated floppy or "bulk erases" an
existing one.  By default, mkfloppy makes a JV3 floppy, but with the
-1 flag it makes a JV1 floppy.

Early Model I operating systems used an FA data address mark for the
directory (a nonstandard value supported only by the WD1771, but not
the WD1791/3), while later ones wrote F8 (for Model III/4 compatibility)
but could read either.  To deal nicely with this problem, \fIxtrs\fP
implements the following kludge.  On writing, any data address mark
other than FB is recorded as F8.  On reading in single density with
the emulated WD1771 (available in Model I mode only), F8 is returned
as FA.  In all other modes, F8 is returned as F8.  This trick makes
the different operating systems perfectly compatible with each other,
which is better than on a real Model I!
 
Under Linux only, any diskX-N file can be a symbolic link to a real
floppy disk drive, typically /dev/fd0 or /dev/fd1.  Most PCs should be
able to read and write TRS-80 compatible floppies in this way.  Many
PC floppy controllers cannot handle single density, however, and some
may have problems even with double density disks written on a real
TRS-80, especially disks formatted by older TRS-80 operating systems.
Use the -doublestep flag if you need to read 35-track or 40-track
media in an 80-track drive.  If you need to write 35-track or 40-track
media in an 80-track drive, bulk-erase the media first and format it
in the 80-track drive.  Don't write to a disk with -doublestep if it
has ever been written to in a real 40-track drive.

If you try to access a real floppy drive with no disk in it,
\fIxtrs\fP will print an error message, and the Z-80 program will get
a somewhat different error than it should.  After inserting a disk,
you must press F7 to clear the error condition.

.SH Data import and export
The emulated floppy \fIutility.dsk\fP contains some programs for
transferring data between the emulator and ordinary Unix files.  All
the programs run on the emulator under Model I/III LDOS; some also
work under other TRS-80 operating systems.

IMPORT/CMD imports a Unix file and writes it to an emulated disk.
Usage: \fIIMPORT [-n] unixfile trsfile\fP.  The -n flag converts Unix
newlines (\\n) to TRS-80 newlines (\\r).  IMPORT/CMD may not work
correctly under operating systems other than Model I/III LDOS.
IMPORT/BAS is a much slower program that performs the same function
but should work under more operating systems.  Simply run it under
Disk Basic and answer the prompts.

EXPORT/CMD reads a file from an emulated disk and exports it to a Unix
file. Usage: \fIEXPORT [-n] trsfile unixfile\fP.  The -n flag converts
TRS-80 newlines (\\r) to Unix newlines (\\n).  EXPORT/CMD may not work
correctly under operating systems other than Model I/III LDOS.
EXPORT/BAS is a much slower program that performs the same function
but should work under more operating systems.  Simply run it under
Disk Basic and answer the prompts.

SETTIME/CMD reads the date and time from Unix and sets the TRS-80
DOS's date and time accordingly.  It has been tested only under LDOS
but probably runs on other Model I/III operating systems.

The emulator implements a set of pseudo-instructions (emulator traps)
that give TRS-80 programs access to Unix files.  The programs listed
above use them.  If you would like to write your own such programs,
the traps are documented in the file trs_imp_exp.h, and source code
for the existing programs is supplied in import.z, export.z,
xtrsemt.h, xtrsemt.ccc, and settime.ccc.

.SH Options
Defaults for all options can be specified using the standard X resource
mechanism, and the class name for \fIxtrs\fP is "Xtrs".
.TP
.B \-background \fIcolor\fP
.IP 
Specifies the background color of the \fIxtrs\fP window.
.TP
.B \-bg \fIcolor\fP
.IP 
Same as -background.
.TP
.B \-foreground \fIcolor\fP
.IP 
Specifies the foreground color of the \fIxtrs\fP window.
.TP
.B \-fg \fIcolor\fP
.IP 
Same as -foreground.
.TP
.B \-usefont
.IP 
Use X fonts instead of the built-in character bitmaps.
Some suitable fonts are supplied with \fIxtrs\fP; they are
exactly the same as the built-in bitmaps, but drawing performance
may be better when using fonts.  See the xset(1) man page for
documentation on how to install fonts in your X server.
.TP
.B \-nofont
.IP 
Use the built-in character bitmaps, not a X font.  This is the default.
.TP
.B \-font \fIfontname\fP
.IP 
If -usefont is also given,
use the specified X font for normal width characters.
The default uses the supplied fonts.
.TP
.B \-widefont \fIfontname\fP
.IP 
If -usefont is also given,
use the specified X font for double width characters.
The default uses the supplied fonts, scaled to double width.
.TP
.B \-trsfont
.IP 
Use the specified X fonts for TRS-80 graphics blocks as well as
characters.  Meaningful only if -usefont is given.  This is the
default if the X font name begins with "-trs80".
.TP
.B \-notrsfont
.IP 
Draw TRS-80 graphics blocks as bitmaps even if X fonts are being used
for characters.  This is the
default if the X font name does not begin with "-trs80".
.TP
.B \-display \fIdisplay\fP
.IP 
Set your X display to \fIdisplay\fP, instead of the default which is to
use the DISPLAY environment variable.
.TP
.B \-debug
.IP 
Enter zbx, the z80 debugger.
.TP
.B \-romfile \fIfilename\fP
.TP
.B \-romfile3 \fIfilename3\fP
.IP 
Use the romfile specified by \fIfilename\fP in Model I mode, or the
romfile specified by \fIfilename3\fP in Model III and Model 4 mode.  
A romfile can be either a raw binary dump or in Intel hex format.
If you do
not set this option or the corresponding X resource, a default
established at compile time is used (if any); see Makefile.local for
instructions on compiling in default romfiles or default romfile names.
.TP
.B \-model1
.IP
Emulate a TRS-80 Model I.  This is the default.
.TP
.B \-model3
.IP
Emulate a TRS-80 Model III.
.TP
.B \-model4
.IP
Emulate a TRS-80 Model 4.
.TP
.B \-resize
.IP 
In Model 4 mode, resize the X window whenever the emulated display
mode changes between 64x16 and 80x24.
.TP
.B \-noresize
.IP 
In Model 4 mode, always keep the X window large enough for 80x24
characters, putting a blank margin around the outside when the emulated
display mode is 64x16.  This is the default.
.TP
.B \-spinfast
.IP
Make the floppy disk appear to spin at 10 times the normal rate.
This works around a problem with some TRS-80 operating systems that
detect whether a drive contains a floppy by polling for a fixed
number of iterations waiting for an index hole to go by.  The emulator
normally emulates the index holes in real time, but can emulate Z-80
instructions faster than a real TRS-80, so sometimes the loop will
time out too soon and the operating system will report that there is
no disk in the drive.
.TP
.B \-nospinfast
.IP
Turn off -spinfast mode.  This is the default.
.TP
.B \-doublestep
.IP
Make real floppy drives double-step, allowing access to 35-track or
40-track media in an 80-track drive.  Linux only.  See the Floppy Disks
section for limitations.
.TP
.B \-nodoublestep
.IP
Turn off double-step mode.  Linux only.  This is the default.

.SH Additional resources
There are many other TRS-80 resources available on the Web, including
shareware and freeware emulators that run under MSDOS and other
operating systems, software for converting TRS-80 physical media to
the emulator's disk file format, ROM images, and TRS-80 software that
has already been converted.  For pointers, see
http://www.research. digital.com/SRC/personal/Tim_Mann/trs80.html.

See README and README.tpm in this package for technical (and
historical) data on \fIxtrs\fP not included in this man page.

.SH Bugs
There may be bugs in the Z-80 emulator which we haven't found yet.
Some of the more bizarre undocumented Z-80 instructions are not
implemented.

Cassette emulation does not work in Model III or 4 mode.  Even in
Model I mode, it works only for programs that use the Level II ROM
routines to access the cassette; the emulator looks for access to the
cassette port from specific PC values to activate the feature.

Serial ports are not emulated.

The Model III/4 alternate character set is not emulated.

Some features of the disk controller are not currently emulated.  (1)
Force Interrupt with condition bits 0x01, 0x02, or 0x04 is not
implemented.  (2) Read Track is not implemented.  (3) The
multiple-sector flags in Read and Write are not implemented.

Real physical floppy disks are supported only under Linux, because
Unix does not provide a portable interface to the low-level floppy
controller functionality that \fIxtrs\fP needs.  There are some
limitations even under Linux: Sectors must be 256 bytes long.
(Supporting multiple lengths would be difficult due to an interface
difference between the PC and TRS-80 floppy controllers.)  Index holes
are faked, not detected on the real disk.  Attempts to access a real
drive with no disk in it are dealt with awkwardly (as documented
above).  The code is new and not thoroughly tested.  Read/write
performance is poor; for example, the "verify" step of LDOS format
seems to read only one sector per revolution.

The emulator arbitrarily limits both JV1 and JV3 disk images to 96
tracks.  The limit could easily be increased to 255 or maybe 256, but
that would probably not be useful with existing TRS-80 operating
systems, which don't expect floppies to have so many tracks.  For
example, LDOS 5.3.1 allows at most 95 tracks on a floppy, but allows
more on hard drives.  256 tracks is an absolute maximum for the TRS-80
floppy disk controller and for the JV3 format.  

The extended JV3 limit of 5802 sectors is somewhat arbitrary as well.
It could be raised by generalizing the code to permit more than two
blocks of 2901.  Again, this does not seem too useful.  It's not a good
way to emulate a hard drive.  5802 sectors is already enough for a 3"
HD (1.44MB) floppy, which is larger than anything the TRS-80
supported.

The emulator guesses a romfile is in .hex format if its first byte is
a colon (':'), so a raw binary ROM image can't start with that byte
value.  In the future it would be nice to accept MODELA/III files too.

Versions of import/cmd and export/cmd for Model 4 LDOS (and non-LDOS
systems on any model) are not currently provided.

If you discover other bugs, or write fixes for any of these, please let
us know.  We expect to incorporate fixes into future releases.

.SH Authors
David Gingold <gingold@think.com>, Thinking Machines Corporation
.br
Alec Wolman <wolman@crl.dec.com>, Digital Equipment Corporation
.br
Timothy Mann <mann@pa.dec.com>, Digital Equipment Corporation

Thanks to Al Petrofsky for supplying the TRS-80 fonts in bdf format.
