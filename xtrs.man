.TH xtrs 1
.SH Name
xtrs \- TRS-80 Model I/III Emulator for the X Window System
.SH Syntax
.B xtrs
.I [options]
.SH Description
\fIxtrs\fP is built on top of a Z-80 emulator, with added routines to support
keyboard and video I/O through an X interface.  The hardware
emulation is based on the TRS-80 Model I and Model III designs.

\fIxtrs\fP supports 48K of RAM. 
Floppy disks are emulated using files to store the data.
A printer is emulated by
sending its output to standard output.  
There is also a rudimentary emulation of cassette I/O
that uses files for cassette tapes (Model I mode only).

The Z-80 emulator has a debugger called zbx.  It works sort of
like dbx.  If you run with debugging turned on (see the options section for
how to do this), you'll enter the debugger, and
you can type "help" for more information.

Special support in the emulator allows the program to block when
waiting for information from the keyboard.  This will work only for
programs that wait for keyboard input using the standard ROM call; the
emulator decides whether to block the Z-80 program when it tries to
read from the keyboard memory by pattern-matching its stack.

The following keys have special meanings to \fIxtrs\fP:

LeftArrow, Backspace, or Delete is the TRS-80 left arrow key.
RightArrow or Tab is the right arrow key.
UpArrow is the up arrow key.
DownArrow or Linefeed is the down arrow key.
Esc or Break is the Break key.
Home, Clear, or LeftAlt is the Clear key. 
Control is the Model III Ctrl key.
RightAlt is equivalent to the shifted down arrow key (used
as a control key with some TRS-80 software).  

F1, F2, and F3 are the Model III function keys.  (F1 is
also the nonstandard Model I Electric Pencil control key that some
users added to their machines.)
F4 is the Model III Caps Lock key.
F5, Compose, or ScrollLock is equivalent to the @ key (so that @ can
be used as a modifier key).
F6 is equivalent to the 0 key (so that a shifted 0 can be obtained).
F7 signals a disk change in the emulated floppy drives (see below). 
F8 exits the program.
F9 requests entry to the debugger if it is active.
F10 is the reset button.  

In Model III mode, the left and right shift keys are distinct; in
Model I mode, they are the same.  The F11 or F14 key activates the
position in the TRS-80 keyboard matrix that corresponds to the Model
III right shift key (address bit 7, data bit 1) even in Model I mode.
F12 or End activates an unused position in the keyboard matrix
(address bit 7, data bit 2).  The keys [, \\, ], ^, _, {, |, },
and ~ also activate unused positions in the keyboard matrix (address
bit 3, data bits 3-7).  These keys map to the corresponding ASCII
characters under some TRS-80 keyboard drivers; under others, they do
nothing.  F13 or Insert is equivalent to underscore (address bit 3,
data bit 7), so that a shifted underscore can be obtained; this maps
to ASCII code 0x7f under some TRS-80 keyboard drivers.

To control the cassette, a file called ".cassette.ctl" in the
current directory keeps track of what file is currently "loaded" as
the cassette tape and the current position within that file.  The
"cassette" shell script provides a way to manipulate this file; typing
"help" shows its commands.  You may use this script to load and
position cassette tape files.  The operation works very much like an
actual tape recorder.

For printer support, any text sent to the TRS-80's printer (using LPRINT
or LLIST, for example) is sent to the standard output.

In Model I mode, xtrs emulates a Radio Shack Expansion Interface with
the Percom Doubler or Radio Shack Doubler installed.  The Doubler
provided double-density disk access by allowing either the stock
WD1771 FDC chip or a WD1791 chip to be selected under program control.
At powerup the 1771 is selected, so operating systems with no Doubler
driver see a stock system.  The emulator pretends to be both a Percom
and Radio Shack Doubler at the same time -- it responds to the special
commands of both -- so a driver for either should work.  Under LDOS,
use the command "FDUBL" (newer versions of LDOS), or "PDUBL" or
"RDUBL" (older versions) to install the driver.

In Model III mode, xtrs emulates the stock Model III floppy
controller, which used a WD1793 chip (software compatible with the
WD1791) to provide both single and double density.

Four floppy drives are emulated, with storage in files named diskX-0,
diskX-1, diskX-2, diskX-3, where X=1 for Model I mode, X=3 for Model
III mode.  If a file of the required name is not found, a drive with
no disk in it is emulated.  If the user does not have write permission
for a floppy file, a write-protect tab is emulated.  To change
floppies in an emulated drive, rename the existing file for the drive
(if any), rename the new floppy file to the proper name, and hit
function key F7 in the emulator.

In a true Model I, if you have a disk controller but attempt to boot
with no disk in drive 0, the system hangs.  As a convenience feature
this behavior is not emulated; instead, if you try to boot in Model I
mode with no disk in drive 0, xtrs emulates having no disk controller.

Due to a limitation of the original Model I hardware, drive :3 cannot
be double-sided in Model I mode.  In the original Model I, you could
not have a drive :3 at all if any drive in the system was
double-sided, but the emulator is able to be more forgiving.

The floppy image files can be of either of two types: JV1, compatible
with Jeff Vavasour's popular freeware Model I emulator for the PC; or
JV3, compatible with Vavasour's commercial Model III/4 emulator.  Both
types work in both Model I and Model III mode.  The emulator uses a
heuristic to decide which type of image it is looking at in each
drive, as neither type has a "magic number" or signature.

JV1 supports only single density, single sided, with directory on
track 17.  Sectors must be 256 bytes long, and up to 96 tracks are
allowed.  Use FORMAT (DIR=17) to format JV1 disks under LDOS.

JV3 is much more flexible, though it still does not support everything
the real controllers could do.  It is best to use JV3 for all the disk
images you create, unless you need to exchange images with someone who
is using the Vavasour Model I emulator.  A JV3 disk can be formatted
with 256 byte sectors, 1 or 2 sides, single or double density, with
either FB (normal) or F8 (deleted) data address mark on any sector.
You cannot format a sector with an incorrect track number or head
number, or with length other than 256 bytes.  You can format a sector
with an intentional CRC error in the data field.  The total number of
sectors on the disk can be at most 2901, which is enough for an 80
track, double-sided, double-density (18 sector) disk.  In addition,
xtrs imposes an upper limit of 96 tracks.

The program mkfloppy makes a blank emulated floppy or "bulk erases" an
existing one.  By default, mkfloppy makes a JV3 floppy, but with the
-1 flag it makes a JV1 floppy.

Early Model I operating systems used an FA data address mark for the
directory (a nonstandard value supported only by the WD1771, but not
the WD1791/3), while later ones wrote F8 (for Model III compatibility)
but could read either.  To deal nicely with this problem, xtrs
implements the following kludge.  On writing, any data address mark
other than FB is recorded as F8.  On reading in single density with
the emulated WD1771 (available in Model I mode only), F8 is returned
as FA.  In all other modes, F8 is returned as F8.  This trick makes
the different operating systems perfectly compatible with each other,
which is better than on a real Model I!
 
The emulator implements a set of pseudo-instructions (emulator traps)
that give TRS-80 programs access to Unix files.  The supplied Z-80
assembly language programs import.z and export.z exercise these
features; see the top of each file for usage instructions.
Unfortunately, these programs currently run only under LDOS.  The
Basic programs import.bas and export.bas are much slower, and use a
different mechanism in the emulator that may be removed in the future,
but they should work under all TRS-80 operating systems.  All these
programs are supplied (in both source and executable form) on the
emulated floppy disk imp_exp.dsk to get you started.

See README and README.tpm in this package for additional technical
(and historical) data.

.SH Options
Defaults for all options can be specified using the standard X resource
mechanism, and the class name for \fIxtrs\fP is "Xtrs".
.TP
.B \-background \fIcolor\fP
.IP 
Specifies the background color of the \fIxtrs\fP window.
.TP
.B \-bg \fIcolor\fP
.IP 
Same as -background.
.TP
.B \-foreground \fIcolor\fP
.IP 
Specifies the foreground color of the \fIxtrs\fP window.
.TP
.B \-fg \fIcolor\fP
.IP 
Same as -foreground.
.TP
.B \-usefont
.IP 
Use a X font instead of the built-in font.  This is the default, if no
arguments or resources are set.
.TP
.B \-nofont
.IP 
Use the built-in font, instead of a X font.
.TP
.B \-display \fIdisplay\fP
.IP 
Set your X display to \fIdisplay\fP, instead of the default which is to
use the DISPLAY environment variable.
.TP
.B \-debug
.IP 
Enter zbx, the z80 debugger.
.TP
.B \-romfile \fIfilename\fP
.B \-romfile3 \fIfilename3\fP
.IP 
Use the romfile specified by \fIfilename\fP in Model I mode, or the
romfile specified by \fIfilename3\fP in Model III mode.  A romfile can
be either a raw binary dump or in Intel hex format.
If you do
not set this option or the corresponding X resource, a default
established at compile time is used (if any); see Makefile.local for
instructions on compiling in default romfiles or default romfile names.
.TP
.B \-model1
.IP
Emulate a TRS-80 Model I.  This is the default.
.TP
.B \-model3
.IP
Emulate a TRS-80 Model III.
.TP
.B \-spinfast
.IP
Make the floppy disk appear to spin at 10 times the normal rate.
This works around a problem with some TRS-80 operating systems that
detect whether a drive contains a floppy by polling for a fixed
number of iterations waiting for an index hole to go by.  The emulator
normally emulates the index holes in real time, but can emulate Z-80
instructions faster than a real TRS-80, so sometimes the loop will
time out too soon and the operating system will report that there is
no disk in the drive.

.SH Resources
There are many other TRS-80 resources available on the Web, including
shareware and freeware emulators that run under MSDOS and other
operating systems, software for converting TRS-80 physical media to
the emulator's disk file format, ROM images, and TRS-80 software that
has already been converted.  For pointers, see
http://www.research.digital.com/SRC/personal/Tim_Mann/trs80.html.

.SH Bugs
There may be bugs in the Z-80 emulator which we haven't found yet.
The undocumented Z-80 instructions are not implemented.  The HALT
instruction causes an exit from the emulator.

We don't draw the original Model I character set.  Instead of the four
arrows you get '[', '\\', ']', and '^'.

Double-width (32-column) mode is not supported.

The alternate character set and probably a pile of other esoteric
Model III features are not emulated.

Cassette emulation does not work in Model III mode.  Even in Model I
mode, it works only for programs that use the Level II ROM routines to
access the cassette; the emulator looks for access to the cassette
port from specific PC values to activate the feature.

Some features of the disk controller are not emulated, but could be
added without too much difficulty: (1) Force Interrupt with nonzero
condition bits is not implemented. (2) Read Address is not
implemented.  (3) Read Track is not implemented.  (4) The
multiple-sector flags in Read and Write are not implemented.

There is no support for real physical floppy disks.  It seems too
non-portable to try to put this directly into the emulator.  Also,
today's controllers often cannot handle the formats that were
generated by the old 1771s and 1791/3s.  Still, partial support that
works only under Linux may appear some day.

The emulator guesses a romfile is in .hex format if its first byte is
a colon (':'), so a raw binary ROM image can't start with that byte
value.  In the future it would be nice to accept MODELA/III files too.

If you discover other bugs, or write fixes for any of these, please let
us know.  We expect to incorporate fixes into future releases.
.SH Authors
David Gingold <gingold@think.com>, Thinking Machines Corporation
.br
Alec Wolman <wolman@crl.dec.com>, Digital Equipment Corporation
.br
Timothy Mann <mann@pa.dec.com>, Digital Equipment Corporation
