;; import.z
;; Timothy Mann, 8/24/97
;; Last modified on Thu Sep  4 13:12:23 PDT 1997 by mann
;;
;; Use xtrs 1.4 emulator traps to copy a file from Unix to TRS-80
;; Usage: IMPORT [-n] unixfile tofile
;; If the -n parameter is given, each newline ('\n') in the Unix
;;  file is converted to a carriage return ('\r'), the TRS-80 end of
;;  line character.

;; Still doesn't work on NEWDOS/80.  They insist on uppercasing the
;;  command line (tough on Unix filenames), and setting the EOF offset
;;  works differently.

@fspec  equ 441ch
@init   equ 4420h
@write  equ 4439h
@close  equ 4428h
@error  equ 4409h
@exit   equ 402dh
@abort  equ 4030h       
@put	equ 001bh
dodcb$	equ 401dh

; Emulator trap instructions, byte-reversed for use in defw:
emt_open	equ 30edh
emt_close	equ 31edh
emt_read	equ 32edh
emt_write	equ 33edh
emt_lseek	equ 34edh
emt_strerror	equ 35edh

iobsize	equ 8192		; must be divisible by 256

	org 5200h
import: 
flag0:	ld a, (hl)		; look for -n flag
	cp ' '
	jr c, usage		; error if line ends here
	jr nz, flag1
	inc hl
	jr flag0
flag1:	cp '-'
	jr nz, unix1
	inc hl
	ld a, (hl)
	or 20h
	cp 'n'
	jr nz, usage		; only -n or -N is accepted
	ld a, 1
	ld (nflag), a
unix0:	inc hl
	ld a, (hl)
        cp ' '		        ; first skip spaces
	jr c, usage             ; error if line ends here
        jr z, unix0
unix1:	ld (uname+1), hl        ; save pointer to Unix filename
unix2:	inc hl                  ; scan for its end
        ld a, (hl)
	cp ' '
	jr c, usage
        jr nz, unix2
	ld (hl), 0              ; NUL terminate
        inc hl
	ld de, dcb              ; ready to get TRS-80 filename from (HL)
        call @fspec
        jr nz, usage
        push hl                 ; save position in command line
        ld hl, iobuf
        ld de, dcb
        ld b, 0
        call @init              ; open the file
        pop hl
        jr z, openok
        call @error
        jp @abort
usage:  ld hl, usager           ; error message and exit
        call dsply
        jp @abort
openok:  
uname:	ld hl, $-$              ; path
        ld bc, 0                ; oflag (O_RDONLY)
        ld de, 0                ; mode (ignored)
        defw emt_open
        jr z, opn2ok            ; go if OK
        ld hl, uopner           ; error message and exit
	jr uerror

;; Read
rloop:
opn2ok:	ld hl, iobuf            ; read a buffer
	ld bc, iobsize
	defw emt_read
	jr z, readok
        ld hl, urder            ; read error (!!code in A)
	jr uerror
readok:	push de			; save fd

;; Translate
        ld a, (nflag)		; check for NL feature
	and a
	jr z, nlfals
	ld hl, iobuf
	push bc			; save byte count
	ld a, 0ah
	ld d, 0dh
	inc c			; deal with b=0 and/ c=0
	inc b
	jr tstrt
tloop:	cp (hl)
	jr nz, notcr
	ld (hl), d
notcr:	inc hl
tstrt:	dec c
	jr nz, tloop
	djnz tloop
	pop bc			; restore byte count

;; Write
nlfals:	push bc			; save byte count
	ld hl, iobuf
	ld de, dcb
	inc b			; deal with b=0 and/or c=0
	ld a, c
	and a
	jr z, wstrt
wloop:  ld (dcb+3), hl
	call @write             ; write 256 bytes to file
        jr z, wrok
        call @error             ; oops, i/o error
        jp @abort
wrok:	inc h
wstrt:  djnz wloop
	pop bc			; restore byte count

;; Done?
	pop de			; restore fd
	ld a, c
	and a
	jr nz, closit		; done for sure
	cp b
	jr nz, rloop		; maybe not done (sloppy)

closit:	defw emt_close		; close Unix file
	jr z, closok
        ld hl, uclser           ; close error (!!code in A)
	jr uerror
closok:	ld a, c
	ld (dcb+8), a		; EOF offset
	ld hl, (dcb+10)		; record number (in case shortening file)
	ld (dcb+12), hl
	ld de, dcb
        call @close             ; close the TRS-80 file
        jr z, cls2ok
        call @error             ; oops, i/o error
        jp @abort
cls2ok: jp @exit                ; all is well

;; Unix error, msg in hl, errno in a
uerror: push af
	call dsply
	pop af
	ld hl, iobuf
	ld bc, 256
	defw emt_strerror
	call dsply
        jp @abort

;; Display message in HL.  03h terminate, 0dh newline and terminate.
dsply:	ld de, dodcb$
	push hl
dsply0:	ld a, (hl)
	cp 03h
	jr z, dsply1
	push af
	call @put
	pop af
	inc hl
	cp 0dh
	jr nz, dsply0
dsply1:	pop hl
	ret

nflag:	defb 0

usager: defb 'Usage: IMPORT [-n] unixfile tofile', 0dh
uopner:	defb 'Error in Unix open: ', 03h
urder:	defb 'Error in Unix read: ', 03h
uclser:	defb 'Error in Unix close: ', 03h

dcb:	defs 32   
iobuf:	defs iobsize
        
        end import
