;; export.z
;; Timothy Mann, 8/24/97
;; Last modified on Sat Jan 24 23:13:29 PST 1998 by mann
;;
;; Use xtrs 1.9 emulator traps to copy a file from TRS-80 to Unix
;; Usage: EXPORT [-n] fromfile unixfile
;; If the -n parameter is given, each carriage return ('\r')
;;  in the TRS-80 file is converted to a newline ('\n') in the Unix file.

;; Model I/III addresses
@fspec  equ 441ch
@init   equ 4420h
@open   equ 4424h
@close  equ 4428h
@read   equ 4436h
@write  equ 4439h
@error  equ 4409h
@exit   equ 402dh
@abort  equ 4030h       
@put	equ 001bh
dodcb$	equ 401dh

;; Model 4 SVCs
@svc	equ 40  ; rst address for SVCs
;@svc	equ 5   ; older zmac requires 8080-style "rst 5"
@fspec6	equ 78
@init6	equ 58
@open6	equ 59
@close6	equ 60
@read6	equ 67
@write6	equ 75
@error6	equ 26
@exit6	equ 22
@abort6	equ 21
@dsply6	equ 10

	org 5200h

;; Jump tables for OS independence
startj:
fspec:	call @fspec
	ret
init:	call @init
	ret
open:	call @open
	ret
close:	call @close
	ret
read:	call @read
	ret
write:	call @write
	ret
error:	call @error
	ret
exit:	call @exit
	ret
abort:	call @abort
	ret
dsply:	call dsply5
	ret
endj:

; Model 4
startj6:
	ld a, @fspec6
	rst @svc
	ret
	ld a, @init6
	rst @svc
	ret
	ld a, @open6
	rst @svc
	ret
	ld a, @close6
	rst @svc
	ret
	ld a, @read6
	rst @svc
	ret
	ld a, @write6
	rst @svc
	ret
	ld a, @error6
	rst @svc
	ret
	ld a, @exit6
	rst @svc
	ret
	ld a, @abort6
	rst @svc
	ret
	ld a, @dsply6
	rst @svc
	ret

; Emulator trap instructions, byte-reversed for use in defw:
emt_open	equ 30edh
emt_close	equ 31edh
emt_read	equ 32edh
emt_write	equ 33edh
emt_lseek	equ 34edh
emt_strerror	equ 35edh

EO_ACCMODE  equ     03
EO_RDONLY   equ     00
EO_WRONLY   equ     01
EO_RDWR     equ     02
EO_CREAT    equ   0100
EO_EXCL     equ   0200
EO_TRUNC    equ  01000
EO_APPEND   equ  02000

export:
	ld a, (000ah)		; Model 4?
	cp 40h
	jr z, not4
	push hl
	ld de, startj
	ld hl, startj6
	ld bc, endj - startj
	ldir
	pop hl
not4:

flag0:	ld a, (hl)		; look for -n flag
	cp ' '
	jp c, usage		; error if line ends here
	jr nz, flag1
	inc hl
	jr flag0
flag1:	cp '-'
	jr nz, fromf
	inc hl
	ld a, (hl)
	or 20h
	cp 'n'
	jp nz, usage		; only -n or -N is accepted
	ld a, 1
	ld (nflag), a
flag2:	inc hl			; skip spaces
	ld a, (hl)
	cp ' '
	jr z, flag2
	jp c, usage

fromf:	ld de, dcb              ; ready to get LDOS filename from (HL)
        call fspec
        jp nz, usage

unix0:	ld a, (hl)              ; scan over Unix filename
        cp ' '		        ; first skip spaces
	jp c, usage             ; error if line ends here
        jr nz, unix1
        inc hl
	jr unix0
unix1:  ld (uname+1), hl        ; save pointer
unix2:	inc hl                  ; now scan for end of Unix name
        ld a, (hl)
	cp ' '+1
	jr nc, unix2
	ld (hl), 0		; NUL terminate Unix name
  
        ld hl, iobuf
        ld de, dcb
        ld b, 0
        call open               ; open the TRS-80 file
        pop hl
        jr z, uname
	ld c, a
        call error
        jp abort

uname:	ld hl, $-$              ; path
        ld bc, EO_WRONLY|EO_CREAT|EO_TRUNC
        ld de, 0666q            ; mode
        defw emt_open		; open the Unix file
        jr z, opn2ok            ; go if OK
        ld hl, uopner           ; error message and exit
        jr uerror

;; Read
opn2ok:	
	ld bc, 0		; count records in bc

loop:	push de			; save fd
	ld de, dcb
	call read               ; read 256 bytes from file
	pop de
        jr z, rdok		; got a full 256 bytes
	cp 28			; eof?
	jr z, closit		; yes, OK
	ld c, a
        call error              ; oops, i/o error
        jp abort
rdok:	inc bc

;; Translate
	push bc			; save record count
        ld a, (nflag)		; check for NL feature
	and a
	jr z, nlfals
	ld hl, iobuf
	ld a, 0dh
	ld bc, 000ah		; b := 0, c := 0ah
tloop:	cp (hl)
	jr nz, notlf
	ld (hl), c
notlf:	inc hl
	djnz tloop
nlfals:	pop bc			; restore record count

;; Write
	ld hl, (dcb+12)		; check if last record
	sub a
	sbc hl, bc
	push bc			; save record count
	ld bc, 0100h		; byte count
	jr nz, notlst
	ld b, 0
	ld a, (dcb+8)
	ld c, a
notlst:
	ld hl, iobuf
	defw emt_write
	ld h, b
	pop bc
	jr z, wrok
	ld hl, uwrer            ; write error
        jr uerror
wrok:	ld a, h
	and a
	jr nz, loop

;; Close
closit:	defw emt_close		; close Unix file
	jr z, closok
        ld hl, uclser           ; close error
	jr uerror
closok:	ld de, dcb
        call close              ; close the TRS-80 file
        jr z, cls2ok
	ld c, a
        call error              ; oops, i/o error
        jp abort
cls2ok: ld hl, 0	        ; all is well
	jp exit

;; Usage message
usage:  ld hl, usager           ; error message and exit
        call dsply
        jp abort

;; Unix error, msg in hl, errno in a
uerror: push af
	call dsply
	pop af
	ld hl, iobuf
	ld bc, 256
	defw emt_strerror
	call dsply
        jp abort

;; Display message in HL.  03h terminate, 0dh newline and terminate.
dsply5:	ld de, dodcb$
	push hl
dsply0:	ld a, (hl)
	cp 03h
	jr z, dsply1
	push af
	call @put
	pop af
	inc hl
	cp 0dh
	jr nz, dsply0
dsply1:	pop hl
	ret

nflag:	defb 0

usager: defb 'Usage: EXPORT [-n] fromfile unixfile', 0dh
uopner:	defb 'Error in Unix open: ', 03h
uwrer:	defb 'Error in Unix write: ', 03h
uclser:	defb 'Error in Unix close: ', 03h

dcb:   defs 32   
iobuf: defs 256
        
        end export
